generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User_Role
enum Role {
  MEMBER
  ADMIN
}

// Wagon_Category
enum Category {
  EKSEKUTIF
  BISNIS
  EKONOMI
}

// Seat_Status
enum SeatAvailabilityStatus {
  AVAILABLE
  RESERVED // Temporarily held during booking process
  BOOKED // Confirmed booking
}

// Booking_Status
enum BookingStatus {
  PENDING
  PAID
  CANCELLED
}

// Payment_Status
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id           String    @id @default(uuid())
  fullName     String
  email        String    @unique
  password     String
  phoneNumber  String    @unique
  idCardNumber String
  role         Role
  bookings     Booking[]
  createdAt    DateTime  @default(now())
}

model Train {
  id        String     @id @default(uuid())
  name      String
  code      String     @unique
  wagons    Wagon[]
  schedules Schedule[]
  createdAt DateTime   @default(now())
}

model Wagon {
  id         String        @id @default(uuid())
  train      Train         @relation(fields: [trainId], references: [id])
  trainId    String
  wagonCode  String
  category   WagonCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  seats      Seat[]
}

model WagonCategory {
  id       String   @id @default(uuid())
  name     Category
  capacity Int
  wagons   Wagon[]
  fares    Fare[]
}

model Seat {
  id               String                 @id @default(uuid())
  wagon            Wagon                  @relation(fields: [wagonId], references: [id])
  wagonId          String
  seatNumber       String
  seatAvailability SeatAvailabilityStatus
  row              Int
  column           String
  scheduleSeats    ScheduleSeat[]
  Booking          Booking[]
}

model Station {
  id                 String     @id @default(uuid())
  name               String
  code               String
  city               String
  schedulesDeparture Schedule[] @relation("DepartureStation")
  schedulesArrival   Schedule[] @relation("ArrivalStation")
}

model Schedule {
  id                 String         @id @default(uuid())
  train              Train          @relation(fields: [trainId], references: [id])
  trainId            String
  departureStation   Station        @relation("DepartureStation", fields: [departureStationId], references: [id])
  departureStationId String
  arrivalStation     Station        @relation("ArrivalStation", fields: [arrivalStationId], references: [id])
  arrivalStationId   String
  departureTime      DateTime
  arrivalTime        DateTime
  scheduleSeats      ScheduleSeat[]
  bookings           Booking[]
  fares              Fare[]
}

model ScheduleSeat {
  id         String   @id @default(uuid())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  seat       Seat     @relation(fields: [seatId], references: [id])
  seatId     String
  isBooked   Boolean  @default(false)

  @@unique([scheduleId, seatId])
}

model Fare {
  id         String        @id @default(uuid())
  schedule   Schedule      @relation(fields: [scheduleId], references: [id])
  scheduleId String
  category   WagonCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  price      Decimal
}

model Booking {
  id             String           @id @default(uuid())
  code           String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  schedule       Schedule         @relation(fields: [scheduleId], references: [id])
  scheduleId     String
  seat           Seat             @relation(fields: [seatId], references: [id])
  seatId         String
  passengerName  String
  totalPassenger Int
  status         BookingStatus
  payments       Payment[]
  histories      BookingHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
}

model BookingHistory {
  id           String   @id @default(uuid())
  booking      Booking  @relation(fields: [bookingId], references: [id])
  bookingId    String
  action       String
  previousData Json
  createdAt    DateTime @default(now())
  createdBy    String
  updatedAt    DateTime
  updatedBy    String
}

model Payment {
  id            String        @id @default(uuid())
  booking       Booking       @relation(fields: [bookingId], references: [id])
  bookingId     String
  amount        Decimal
  status        PaymentStatus
  paymentMethod String
  paymentDate   DateTime
  logs          PaymentLog[]
}

model PaymentLog {
  id        String        @id @default(uuid())
  payment   Payment       @relation(fields: [paymentId], references: [id])
  paymentId String
  message   String
  status    PaymentStatus
  createdAt DateTime      @default(now())
}
